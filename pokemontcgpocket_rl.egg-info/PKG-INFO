Metadata-Version: 2.4
Name: pokemontcgpocket-rl
Version: 0.1.0
Summary: Research-grade reinforcement learning engine for PokÃ©mon TCG Pocket
Author: Pokemon TCG Pocket RL Team
License: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=2.3.0
Requires-Dist: torchvision>=0.18.0
Requires-Dist: torchaudio>=2.3.0
Requires-Dist: gymnasium>=1.0.0
Requires-Dist: ray[rllib]>=2.9.0
Requires-Dist: lightning>=2.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: pyarrow>=12.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: beautifulsoup4>=4.12.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn>=0.23.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: click>=8.1.0
Requires-Dist: rich>=13.0.0
Requires-Dist: tqdm>=4.65.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: onnx>=1.14.0
Requires-Dist: onnxruntime>=1.15.0
Provides-Extra: dev
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: pyright>=1.1.320; extra == "dev"
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: pytest-xdist>=3.3.0; extra == "dev"
Requires-Dist: hypothesis>=6.82.0; extra == "dev"
Requires-Dist: ipython>=8.14.0; extra == "dev"
Requires-Dist: jupyter>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.3.0; extra == "dev"
Dynamic: license-file
Dynamic: requires-python

# Pokemon TCG Pocket RL Engine

A research-grade reinforcement learning engine that learns to play PokÃ©mon TCG Pocket like a chess engine.

## Architecture

This project implements a complete RL pipeline for Pokemon TCG Pocket:

- **Card DB** (`src/card_db/`) - Immutable card data structures and parsing
- **Rules Engine** (`src/rules/`) - Deterministic game simulator (~100ns/step target)  
- **Environment** (`src/env/`) - Gym-compatible wrapper with action masks
- **Networks** (`src/net/`) - PyTorch policy-value networks
- **Training** (`src/train/`) - Lightning loops distributed via Ray
- **Serving** (`src/serve/`) - FastAPI inference service with ONNX

## Quick Start

```bash
# Install dependencies
make install-dev

# Run tests
make test

# Format code
make format

# Run all checks
make prepush
```

## Development

This project follows strict code quality standards:

- **Python 3.11** with mandatory type hints
- **Line length 100** with Black + Ruff formatting
- **â‰¥90% test coverage** especially for rules engine
- **Performance target**: â‰¤150Î¼s per game step

See the Makefile for all available development commands.

## Project Status

ðŸš§ **Week 1**: Setting up card database and core data structures 
