[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pokemontcgpocket-rl"
version = "0.1.0"
description = "Research-grade reinforcement learning engine for PokÃ©mon TCG Pocket"
authors = [
    {name = "Pokemon TCG Pocket RL Team"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = [
    # Core ML/RL dependencies
    "torch>=2.3.0",
    "torchvision>=0.18.0",
    "torchaudio>=2.3.0",
    "gymnasium>=1.0.0",
    "ray[rllib]>=2.9.0",
    "lightning>=2.0.0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyarrow>=12.0.0",
    
    # Web scraping & API
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "pydantic>=2.0.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "python-dotenv>=1.0.0",
    
    # ONNX inference
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
]

[project.optional-dependencies]
dev = [
    # Formatting & linting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "pyright>=1.1.320",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    
    # Development tools
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "pre-commit>=3.3.0",
]

[project.scripts]
pokemon-rl = "src.train.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101"]  # allow assert in tests

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "ray.*",
    "gymnasium.*", 
    "torch.*",
    "lightning.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "src/card_db/sample_data.py",
    "src/card_db/scraper.py",
    "src/card_db/storage.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 